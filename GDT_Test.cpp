#include <ctime>
#include <cstdlib>
#include <iostream>
#include <string>
#include <cmath>
#include <windows.h>
using namespace std;

int randNum (int n);
void pick_a_question();
int select_next_available(int n);
int r;
int score;
int questions;
int count;
// int question_chooser[42] = {0,1,2,3,4,5,6};


bool quest_ans[42]; // total number of questions
// int questions;
int questions_remaining = 42;  // total number of questions

int main(){
    HANDLE h = GetStdHandle ( STD_OUTPUT_HANDLE );
    WORD wOldColorAttrs;
    CONSOLE_SCREEN_BUFFER_INFO csbiInfo; 
    
int i, q, n;
          
srand(time(0)); // set seed for randomizing

SetConsoleTextAttribute ( h, FOREGROUND_GREEN | FOREGROUND_INTENSITY );


   
cout << endl;
cout << "*******************************************************" << endl;
cout << "*****                                             *****" << endl;
cout << "***** Geometric Tolerancing and Dimensioning Quiz *****" << endl; 
cout << "*****                                             *****" << endl;
cout << "*******************************************************" << endl;
cout << endl;
cout << endl;
    cout << "How many questions would you like to answer? ";
    cin >> questions; 
    count = questions;
    cout << endl;
    for (i = 1; i <= questions; i++)
    pick_a_question();
    cout << endl;   
    
cout << "********************************************************" << endl;
cout << "*                                                      *" << endl;
cout << "* *********           END OF TEST            ********* *" << endl;
cout << "*                                                      *" << endl;
cout << "********************************************************" << endl;
cout << endl;
cout << endl;
cout << "You answered " << score << " questions out of " << count << " correctly" << endl;
cout << "which is " << (float) score / count * 100 << "%" << endl;

cin.get();
cin.get();
    return 0;
} // end of main function
   
// Pick a question function 
void pick_a_question() {
    int q;
    int n;
    char answer;
    int questions;
    int count;
    n = randNum(questions_remaining--);
    q = select_next_available(n);
    r = q % 41; // this is the total number of questions minus one
                       
switch(r)
    {
    case 0:
    cout << endl;
    cout << "The proper way to reference the standard is? (1.1.3)" << endl << endl;
    cout << "A) ASME Y14.5M-1994" << endl;
    cout << "B) ANSI Y14.5M-1994" << endl;
    cout << "C) ASME Y14.5M-1999" << endl;
    cout << "D) ASME Y14.5M-2004" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'a' || answer == 'A')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is A" << endl;
        }
        break;
    case 1:
    cout << endl;
    cout << "Dimensions shall be selected and arranged to suit the _____ of a part and" << endl;
    cout << "shall not be subject to more than one interpretation. (1.4 part D)" << endl << endl;
    cout << "A) Inspection" << endl;
    cout << "B) manufacture" << endl;
    cout << "C) inspection and manufacture" << endl;
    cout << "D) function and mating relationship" << endl;
    cin >> answer;
    questions --; 
        if (answer == 'd' || answer == 'D')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else  
        {          
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is D" << endl;
        }
        break;
    case 2:
    cout << endl;
    cout << "If a dimension was defined as .505+/-.005 and four parts were inspected with" << endl;
    cout << "the dimensions listed which part would be compliant? (2.4)" << endl << endl;
    cout << "A) .5101" << endl;
    cout << "B) .5099" << endl;
    cout << "C) .4999" << endl;
    cout << "D) .4960" << endl;
    cin >> answer;
    questions --; 
        if (answer == 'b' || answer == 'B')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else
        {            
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is B" << endl;
        }
        break;
    case 3:
    cout << endl;
    cout << "The variable boundary generated by the collective effects of a size feature's" << endl;
    cout << "specified MMC material condition, the geometric tolerance for that material"  << endl;
    cout << "condition, the size tolerance and the additional geometric tolerance derived"  << endl;
    cout << "from the feature's departure from its specified material condition is: (1.3.23)" << endl << endl;
    cout << "A) Resultant Condition"  << endl;
    cout << "B) Feature of Size" << endl;
    cout << "C) Datum Feature Simulator" << endl;
    cout << "D) Virtual Condition" << endl;
    cin >> answer;
    questions --; 
        if (answer == 'a' || answer == 'A')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else
        {            
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is A" << endl;
        }
        break;
    case 4:
    cout << endl;
    cout << "Invoking this concept is used for controlling non-circular feature" << endl;
    cout << "position at MMC where the feature's center is not conveniently identifiable." << endl;
    cout << "(5.10.1)" << endl << endl;
    cout << "A) Coaxiality" << endl;
    cout << "B) Composite" << endl;
    cout << "C) Simultaneous" << endl;
    cout << "D) Boundary" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'd' || answer == 'D')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is D" << endl;
        }
        break;
    case 5:
    cout << endl;
    cout << "Datum displacement is not allowed when the datum feature of size is (5.3.4.2)" << endl << endl;
    cout << "A) At MMC" << endl;
    cout << "B) At LMC" << endl;
    cout << "C) At RFS" << endl;
    cout << "D) An A or B datum" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'c' || answer == 'C')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is C" << endl;
        }
        break;
    case 6:
    cout << endl;
    cout << "In certain cases of extreme deviation (within the limits of size) or" << endl;
    cout << "orientation deviation of the hole, the tolerance in terms of the axis may not" << endl;
    cout << "be exactly equivalent to the tolerance in terms of the surface, In such cases," << endl; 
    cout << "the ______ interpretation shall take precedence. (5.3.2.1)" << endl << endl;
    cout << "A) axis" << endl;
    cout << "B) surface" << endl;
    cout << "C) quality engineer's" << endl;
    cout << "D) manufacturer's" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'b' || answer == 'B')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is B" << endl;
        }
        break;
    case 7:
    cout << endl;
    cout << "What is the virtual condition of a .253+.005/-.001 hole with a" << endl;
    cout << "positional tolerance of .008 LMC?" << endl << endl;
    cout << "A) .244" << endl;
    cout << "B) .261" << endl;
    cout << "C) .266" << endl;
    cout << "D) .258" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'c' || answer == 'C')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is C" << endl;
        }
        break;
    case 8:
    cout << endl;
    cout << "The symbol used to control coplanarity of 2 surface is_______" << endl << endl;
    cout << "A) Parallelism" << endl;
    cout << "B) Profile" << endl;
    cout << "C) Straightness" << endl;
    cout << "D) Flatness" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'b' || answer == 'B')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is B" << endl;
        }
        break;
    case 9:
    cout << endl;
    cout << "Which of the following is not an orientation geometric tolerance? (3.3.3)" << endl << endl;
    cout << "A) Angularity" << endl;
    cout << "B) Symmetry" << endl;
    cout << "C) Perpendicularity" << endl;
    cout << "D) Parallelism" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'b' || answer == 'B')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is B" << endl;
        }
        break;        
    case 10:
    cout << endl;
    cout << "Which of the following is not a location geometric tolerance?" << endl << endl;
    cout << "A) Position" << endl;
    cout << "B) Symmetry" << endl;
    cout << "C) Concentricity" << endl;
    cout << "D) Parallelism" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'D' || answer == 'd')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is D" << endl;
        }
        break;
    case 11:
    cout << endl;
    cout << "Positional tolerance for a floating fastener can be calculated by (5.3.2.3)" << endl << endl;
    cout << "A) T=H-F" << endl;
    cout << "B) T=H-F/2" << endl;
    cout << "C) T=H-F/F-1" << endl;
    cout << "D) T=H+F" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'A' || answer == 'a')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is A" << endl;
        }
        break;
    case 12:
    cout << endl;
    cout << "Form Control is provided by" << endl << endl;
    cout << "A) Concentricity" << endl;
    cout << "B) Cylindricity" << endl;
    cout << "C) Position" << endl;
    cout << "D) Symmetry" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'B' || answer == 'b')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is B" << endl;
        }
        break;
    case 13:
    cout << endl;
    cout << "The tolerancing of coxial features modified at MMC may be accomplished by" << endl << endl;
    cout << "A) Symmetry" << endl;
    cout << "B) Concentricity" << endl;
    cout << "C) Position" << endl;
    cout << "D) Runout" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'C' || answer == 'c')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is C" << endl;
        }
        break;
    case 14:
    cout << endl;
    cout << "Rule number 2 states that" << endl << endl;
    cout << "A) MMC is the default for a positional tolerance" << endl;
    cout << "B) Perfect Form at MMC is required" << endl;
    cout << "C) The default for all geometric tolerances is RFS" << endl;
    cout << "D) Perfect Form at LMC is required" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'C' || answer == 'c')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is C" << endl;
        }
        break;
    case 15:
    cout << endl;
    cout << "If a straightness tolerance with a value other than zero is associated with" << endl;
    cout << "the size of a cylindrical feature, perfect form ____" << endl << endl;
    cout << "A) At MMC is not required" << endl;
    cout << "B) At MMC is required" << endl;
    cout << "C) At LMC is required" << endl;
    cout << "D) Is required regardless of feature size" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'A' || answer == 'a')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is A" << endl;
        }
        break;
    case 16:
    cout << endl;
    cout << "A datum target area is simulated in a fixture by a gage pin having a" << endl << endl;
    cout << "A) Spherical tip" << endl;
    cout << "B) Concave tip" << endl;
    cout << "C) Conical tip" << endl;
    cout << "D) Flat tip" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'D' || answer == 'd')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is D" << endl;
        }
        break;
    case 17:
    cout << endl;
    cout << "If a datum feature of size is modified at MMC, the datum feature" << endl; 
    cout << "simulator is " << endl << endl;
    cout << "A) A variable size" << endl;
    cout << "B) A fixed size" << endl;
    cout << "C) Adjustable" << endl;
    cout << "D) Removable" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'B' || answer == 'b')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is B" << endl;
        }
        break;
    case 18:
    cout << endl;
    cout << "Rule number 1 states that for a feature of size perfect form is" << endl << endl; 
    cout << "A) Required at MMC" << endl;
    cout << "B) Not required at MMC" << endl;
    cout << "C) Required at LMC" << endl;
    cout << "D) Required Regardless of feature size" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'A' || answer == 'a')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is A" << endl;
        }
        break;
    case 19:
    cout << endl;
    cout << "The height of a projected tolerance zone is based on the" << endl << endl; 
    cout << "A) Height of the mating fastener" << endl;
    cout << "B) Maximum thickness of the mating part" << endl;
    cout << "C) Depth of the tapped hole" << endl;
    cout << "D) Two times the diameter of the mating fastener" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'B' || answer == 'b')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is B" << endl;
        }
        break;
    case 20:
    cout << endl;
    cout << "What line type is used for a projected tolerance zone?" << endl << endl; 
    cout << "A) Hidden Line" << endl;
    cout << "B) Dashed Line" << endl;
    cout << "C) Solid Line" << endl;
    cout << "D) Chain Line" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'D' || answer == 'd')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is D" << endl;
        }
        break;
    case 21:
    cout << endl;
    cout << "What line type is used to indicate a datum target line?" << endl << endl; 
    cout << "A) Hidden Line" << endl;
    cout << "B) Phantom Line" << endl;
    cout << "C) Solid Line" << endl;
    cout << "D) Center Line" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'B' || answer == 'b')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is B" << endl;
        }
        break;   
    case 22:
    cout << endl;
    cout << "Which of the following is not a type of datum target?" << endl << endl; 
    cout << "A) Surface" << endl;
    cout << "B) Point" << endl;
    cout << "C) Line" << endl;
    cout << "D) Area" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'A' || answer == 'a')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is A" << endl;
        }
        break;
    case 23:
    cout << endl;
    cout << "True Geometric Counterparts are ______ " << endl << endl; 
    cout << "A) Gage Pins" << endl;
    cout << "B) Surface Plates" << endl;
    cout << "C) Theoretical" << endl;
    cout << "D) Datum Feature Simulators" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'C' || answer == 'c')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is C" << endl;
        }
        break;
    case 24:
    cout << endl;
    cout << "When using Datum Targets, near side leaders are ____, while far side leaders" << endl;
    cout << "are _______ " << endl << endl; 
    cout << "A) Solid, Dashed" << endl;
    cout << "B) Phantom, Dashed" << endl;
    cout << "C) Solid, Phantom" << endl;
    cout << "D) Chain, Solid" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'A' || answer == 'a')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is A" << endl;
        }
        break; 
    case 25:
    cout << endl;
    cout << "What is the virtual condition of a .495+.002/-.004 diameter pin" << endl;
    cout << "with a positional tolerance of .007 LMC?" << endl << endl; 
    cout << "A) .497" << endl;
    cout << "B) .504" << endl;
    cout << "C) .484" << endl;
    cout << "D) .491" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'C' || answer == 'c')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is C" << endl;
        }
        break;    
    case 26:
    cout << endl;
    cout << "Using the floating fastener case formula, determine the required positional" << endl;
    cout << "tolerance. The minimum diameter of the clearance hole is .257, and the" << endl;
    cout << "maximum diameter of the fastener is .250" << endl << endl; 
    cout << "A) .014" << endl;
    cout << "B) .007" << endl;
    cout << "C) .0035" << endl;
    cout << "D) .009" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'B' || answer == 'b')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is B" << endl;
        }
        break;
    case 27:
    cout << endl;
    cout << "A datum target area is indicated by ______ lines inside a ______ outline of" << endl;
    cout << "the desired shape, with controlling dimensions added" << endl << endl;
    cout << "A) Hidden, solid" << endl;
    cout << "B) Section, phantom" << endl;
    cout << "C) Center, dashed" << endl;
    cout << "D) Chain, hidden" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'B' || answer == 'b')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is B" << endl;
        }
        break;
    case 28:
    cout << endl;
    cout << "When dimensionally locating datum target points where there is not a direct" << endl;
    cout << "view of the surface, the location is dimensioned where?" << endl << endl;
    cout << "A) On a separate note" << endl;
    cout << "B) On two adjacent views" << endl;
    cout << "C) In the feature control frame" << endl;
    cout << "D) By a leader line" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'B' || answer == 'b')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is B" << endl;
        }
        break;
    case 29:
    cout << endl;
    cout << "Where datums are established by targets on complex or irregular surfaces," << endl;
    cout << "the datum feature symbol _______ required (4.6.7)" << endl << endl;
    cout << "A) may be" << endl;
    cout << "B) is always" << endl;
    cout << "C) is sometimes" << endl;
    cout << "D) is not" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'D' || answer == 'd')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is D" << endl;
        }
        break;   
    case 30:
    cout << endl;
    cout << "A geometric control that may be applied to a center plane, axis or surface is?" << endl;
    cout << "(6.4.1)" << endl << endl;
    cout << "A) Straightness" << endl;
    cout << "B) Flatness" << endl;
    cout << "C) Profile" << endl;
    cout << "D) Concentricity" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'A' || answer == 'a')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is A" << endl;
        }
        break;   
    case 31:
    cout << endl;
    cout << "A symmetry tolerance can only be used if the datum is at" <<endl << endl;
    cout << "A) MMC" << endl;
    cout << "B) LMC" << endl;
    cout << "C) RFS" << endl;
    cout << "D) RFS or LMC" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'C' || answer == 'c')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is C" << endl;
        }
        break;  
    case 32:
    cout << endl;
    cout << "The radial difference between two concentric cylinders describes the" << endl;
    cout << "tolerance zone for_______ (6.4.4.1)" << endl << endl;
    cout << "A) Concentricity" << endl;
    cout << "B) Circularity" << endl;
    cout << "C) runout" << endl;
    cout << "D) Cylindricity" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'D' || answer == 'd')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is D" << endl;
        }
        break;
    case 33:
    cout << endl;
    cout << "Which is the correct example of metric limit dimensioning? (2.3.1)" << endl << endl;
    cout << "A) 12.15 over 13.50" << endl;
    cout << "B) 13.50 over 12.15" << endl;
    cout << "C) 13.5 over 12.15" << endl;
    cout << "D) None of the above" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'B' || answer == 'b')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is B" << endl;
        }
        break;
    case 34:
    cout << endl;
    cout << "A note to indicate if dimensional limits apply after plating or coating is:" << endl;
    cout << "(2.4.1)" << endl << endl;
    cout << "A) Not required on the drawing, since this is implied" << endl;
    cout << "B) Required on the drawing" << endl;
    cout << "C) At the discretion of the engineer" << endl;
    cout << "D) There is no D, so don't pick it" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'B' || answer == 'b')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is B" << endl;
        }
        break; 
    case 35:
    cout << endl;
    cout << "A datum feature is theoretically described by its" << endl << endl;
    cout << "A) Datum Feature Simulator" << endl;
    cout << "B) Actual mating size" << endl;
    cout << "C) True geometric counterpart" << endl;
    cout << "D) Actual Mating envelope" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'C' || answer == 'c')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is C" << endl;
        }
        break; 
    case 36:
    cout << endl;
    cout << "Where only a tolerance of size is specified, there is no requirement for a" << endl;
    cout << "boundary of perfect form at ______(2.7.1.1)" << endl << endl;    
    cout << "A) MMC" << endl;
    cout << "B) Its virtual condition" << endl;
    cout << "C) Its resultant condition" << endl;
    cout << "D) LMC" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'D' || answer == 'd')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is D" << endl;
        }
        break;
    case 37:
    cout << endl;
    cout << "MMC and LMC may be applied to _____, ______ and ______ if the features being" << endl;
    cout << "controlled are features of size" << endl<< endl;
    cout << "A) Profile, True Position and Perpendicularity " << endl;
    cout << "B) Profile, Flatness and True Position" << endl;
    cout << "C) Straightness, True Position and Perpendicularity" << endl;
    cout << "D) True Position, Profile and Circularity" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'C' || answer == 'c')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is C" << endl;
        }
        break; 
    case 38:
    cout << endl;
    cout << "When using limit dimensioning the high limit is placed _______ (2.2)" << endl<< endl;
    cout << "A) Above and After" << endl;
    cout << "B) Above and Before" << endl;
    cout << "C) Below and After" << endl;
    cout << "D) Below and Before" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'A' || answer == 'a')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is A" << endl;
        }
        break; 
    case 39:
    cout << endl;
    cout << "The profile size/form/orientation refinement control refers to the __ (6.5.9.1)" << endl<< endl;
    cout << "A) Upper segment in a composite profile FCF" << endl;
    cout << "B) Lower segment in a composite profile FCF" << endl;
    cout << "C) None of the above" << endl;
    cout << "D) This question is not swell and I don't know the correct answer" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'B' || answer == 'b')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is B" << endl;
        }
        break; 
    case 40:
    cout << endl;
    cout << "When a slot's geometric tolerance is modified at LMC, the greatest geometric" << endl;
    cout << "tolerance may result at (2.8.4)" << endl << endl;
    cout << "A) Its smallest size" << endl;
    cout << "B) Its largest size" << endl;
    cout << "C) Its virtual condition" << endl;
    cout << "D) Its resultant condition" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'A' || answer == 'a')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is A" << endl;
        }
        break;
    case 41:
    cout << endl;
    cout << "The form of cylinders, spheres and cones may be controlled by ____ (6.4.2)" << endl << endl;
    cout << "A) Runout" << endl;
    cout << "B) Cylindricity" << endl;
    cout << "C) Circularity" << endl;
    cout << "D) Concentricity" << endl;
    cin >> answer; 
    questions --;
        if (answer == 'C' || answer == 'c')
        {
        cout << "     **** CORRECT ***" << endl;
        score++;
        }
        else 
        {         
        cout << "     --- INCORRECT ---" << endl;
        cout << "The correct answer is C" << endl;
        }
        break;                             
    }
}

// Selecting next available question 

int select_next_available(int n) {
    int i = 0;
           
    while (quest_ans[i])
    i++;
    
    while (n-- > 0) {
        i++;
        while (quest_ans[i])
            i++;
    }
    quest_ans[i] = true;
    return i;
}

// Random Question Generator

int randNum(int n) {
    return rand() % n;
}

